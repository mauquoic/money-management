{
	"info": {
		"_postman_id": "01a4d130-7c50-4584-a328-b6669557c59b",
		"name": "MoneyManagement Blog and Development",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.username).to.eql(\"me@mail.com\");",
									"    pm.expect(jsonData.email).to.eql(\"me@mail.com\");",
									"    pm.expect(jsonData.preferences.locale).to.eql(\"en_GB\");",
									"    pm.expect(jsonData.preferences.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.preferences.darkMode).to.be.true;",
									"});",
									"pm.environment.set(\"user_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"locale\": \"en_US\",\n    \"currency\": \"CHF\",\n    \"darkMode\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/me/preferences",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"me",
								"preferences"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with updated preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Account has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.username).to.eql(\"me@mail.com\");",
									"    pm.expect(jsonData.email).to.eql(\"me@mail.com\");",
									"    pm.expect(jsonData.preferences.locale).to.eql(\"en_US\");",
									"    pm.expect(jsonData.preferences.currency).to.eql(\"CHF\");",
									"    pm.expect(jsonData.preferences.darkMode).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Add account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Account has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.name).to.eql(\"MyFirstAccount\");",
									"    pm.expect(jsonData.description).to.eql(\"I am so proud to have my own money!!\");",
									"    pm.expect(jsonData.type).to.eql(\"CASH\");",
									"    pm.expect(jsonData.liquid).to.eql(true);",
									"});",
									"pm.environment.set(\"account_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"MyFirstAccount\",\n    \"balance\": 2200,\n    \"currency\": \"EUR\",\n    \"description\": \"I am so proud to have my own money!!\",\n    \"liquid\": true,\n    \"type\": \"CASH\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Account has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"account_id\"));",
									"    pm.expect(jsonData.name).to.eql(\"MyFirstAccount\");",
									"    pm.expect(jsonData.balance).to.eql(2200.0);",
									"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.type).to.eql(\"CASH\");",
									"    pm.expect(jsonData.liquid).to.eql(true);",
									"    pm.expect(jsonData.snapshots).to.be.undefined;",
									"    pm.expect(jsonData.description).to.eql(\"I am so proud to have my own money!!\");",
									"    pm.expect(jsonData.addedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/accounts/{{account_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts",
								"{{account_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"balance\": 3000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/accounts/{{account_id}}/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts",
								"{{account_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Account has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"account_id\"));",
									"    pm.expect(jsonData.name).to.eql(\"MyFirstAccount\");",
									"    pm.expect(jsonData.balance).to.eql(3000.0);",
									"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.description).to.eql(\"I am so proud to have my own money!!\");",
									"    pm.expect(jsonData.addedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.type).to.eql(\"CASH\");",
									"    pm.expect(jsonData.liquid).to.eql(true);",
									"    pm.expect(jsonData.snapshots.length).to.eql(1);",
									"    pm.expect(jsonData.snapshots[0].balance).to.eql(2200.0);",
									"    pm.expect(jsonData.snapshots[0].validFrom).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.snapshots[0].validTo).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/accounts/{{account_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts",
								"{{account_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"MyFirstAccountEdited\",\n    \"balance\": 2300,\n    \"currency\": \"USD\",\n    \"description\": \"This has been edited\",\n    \"type\": \"PENSION_FUND\",\n    \"liquid\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/accounts/{{account_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts",
								"{{account_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account after edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Account has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"account_id\"));",
									"    pm.expect(jsonData.name).to.eql(\"MyFirstAccountEdited\");",
									"    pm.expect(jsonData.balance).to.eql(2300.0);",
									"    pm.expect(jsonData.currency).to.eql(\"USD\");",
									"    pm.expect(jsonData.type).to.eql(\"PENSION_FUND\");",
									"    pm.expect(jsonData.liquid).to.eql(false);",
									"    pm.expect(jsonData.description).to.eql(\"This has been edited\");",
									"    pm.expect(jsonData.addedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.snapshots.length).to.eql(1);",
									"    pm.expect(jsonData.snapshots[0].balance).to.eql(2200.0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/accounts/{{account_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts",
								"{{account_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get inexisting acount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/accounts/bcbc853c-9ce6-4ef5-b660-7ecb4d497b7d",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts",
								"bcbc853c-9ce6-4ef5-b660-7ecb4d497b7d"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add second account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Account has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.name).to.eql(\"MySecondAccount\");",
									"    pm.expect(jsonData.balance).to.eql(220);",
									"    pm.expect(jsonData.currency).to.eql(\"CHF\");",
									"    pm.expect(jsonData.type).to.eql(\"UNDEFINED\");",
									"    pm.expect(jsonData.liquid).to.eql(true);",
									"    pm.expect(jsonData.description).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"MySecondAccount\",\n    \"balance\": 220,\n    \"currency\": \"CHF\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Exchange has currency information and stocks\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"    pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"account_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Crypto",
			"item": [
				{
					"name": "Fill crypto DB",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/stubs/assets/load",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stubs",
								"assets",
								"load"
							]
						}
					},
					"response": [
						{
							"name": "Fill crypto DB",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://ce2a859c-cfbd-42f0-afee-525247351d66.mock.pstmn.io/coins/markets",
									"protocol": "https",
									"host": [
										"ce2a859c-cfbd-42f0-afee-525247351d66",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"coins",
										"markets"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "[{\"id\":\"bitcoin\",\"symbol\":\"btc\",\"name\":\"Bitcoin\",\"image\":\"https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579\",\"current_price\":22510,\"market_cap\":430357693193,\"market_cap_rank\":1,\"fully_diluted_valuation\":472862714646,\"total_volume\":24020746697,\"high_24h\":23398,\"low_24h\":22515,\"price_change_24h\":-887.2822447658582,\"price_change_percentage_24h\":-3.7922,\"market_cap_change_24h\":-18814627427.890686,\"market_cap_change_percentage_24h\":-4.18873,\"circulating_supply\":19112337.0,\"total_supply\":21000000.0,\"max_supply\":21000000.0,\"ath\":69045,\"ath_change_percentage\":-67.38099,\"ath_date\":\"2021-11-10T14:24:11.849Z\",\"atl\":67.81,\"atl_change_percentage\":33113.46861,\"atl_date\":\"2013-07-06T00:00:00.000Z\",\"roi\":null,\"last_updated\":\"2022-08-04T20:18:46.533Z\"},{\"id\":\"ethereum\",\"symbol\":\"eth\",\"name\":\"Ethereum\",\"image\":\"https://assets.coingecko.com/coins/images/279/large/ethereum.png?1595348880\",\"current_price\":1596.42,\"market_cap\":191704933697,\"market_cap_rank\":2,\"fully_diluted_valuation\":null,\"total_volume\":14559055672,\"high_24h\":1661.44,\"low_24h\":1592.64,\"price_change_24h\":-54.04712975976622,\"price_change_percentage_24h\":-3.27466,\"market_cap_change_24h\":-6992065585.963715,\"market_cap_change_percentage_24h\":-3.51896,\"circulating_supply\":119961954.703923,\"total_supply\":119961018.203923,\"max_supply\":null,\"ath\":4878.26,\"ath_change_percentage\":-67.31591,\"ath_date\":\"2021-11-10T14:24:19.604Z\",\"atl\":0.432979,\"atl_change_percentage\":368143.12486,\"atl_date\":\"2015-10-20T00:00:00.000Z\",\"roi\":{\"times\":93.82055673705845,\"currency\":\"btc\",\"percentage\":9382.055673705845},\"last_updated\":\"2022-08-04T20:18:33.320Z\"},{\"id\":\"tether\",\"symbol\":\"usdt\",\"name\":\"Tether\",\"image\":\"https://assets.coingecko.com/coins/images/325/large/Tether-logo.png?1598003707\",\"current_price\":1.001,\"market_cap\":65912488955,\"market_cap_rank\":3,\"fully_diluted_valuation\":null,\"total_volume\":47415356729,\"high_24h\":1.006,\"low_24h\":0.995659,\"price_change_24h\":-4.6682115715013e-05,\"price_change_percentage_24h\":-0.00467,\"market_cap_change_24h\":-51236613.66107178,\"market_cap_change_percentage_24h\":-0.07767,\"circulating_supply\":65876317670.4762,\"total_supply\":65876317670.4762,\"max_supply\":null,\"ath\":1.32,\"ath_change_percentage\":-24.2401,\"ath_date\":\"2018-07-24T00:00:00.000Z\",\"atl\":0.572521,\"atl_change_percentage\":75.08103,\"atl_date\":\"2015-03-02T00:00:00.000Z\",\"roi\":null,\"last_updated\":\"2022-08-04T20:15:52.528Z\"},{\"id\":\"usd-coin\",\"symbol\":\"usdc\",\"name\":\"USD Coin\",\"image\":\"https://assets.coingecko.com/coins/images/6319/large/USD_Coin_icon.png?1547042389\",\"current_price\":1.001,\"market_cap\":54339386771,\"market_cap_rank\":4,\"fully_diluted_valuation\":null,\"total_volume\":6380694280,\"high_24h\":1.006,\"low_24h\":0.995672,\"price_change_24h\":0.00084673,\"price_change_percentage_24h\":0.08464,\"market_cap_change_24h\":-51189473.14657593,\"market_cap_change_percentage_24h\":-0.09411,\"circulating_supply\":54267420553.9265,\"total_supply\":54267657988.1249,\"max_supply\":null,\"ath\":1.17,\"ath_change_percentage\":-14.49125,\"ath_date\":\"2019-05-08T00:40:28.300Z\",\"atl\":0.891848,\"atl_change_percentage\":12.43692,\"atl_date\":\"2021-05-19T13:14:05.611Z\",\"roi\":null,\"last_updated\":\"2022-08-04T20:18:49.466Z\"},{\"id\":\"binancecoin\",\"symbol\":\"bnb\",\"name\":\"BNB\",\"image\":\"https://assets.coingecko.com/coins/images/825/large/bnb-icon2_2x.png?1644979850\",\"current_price\":310.6,\"market_cap\":50741735300,\"market_cap_rank\":5,\"fully_diluted_valuation\":51313487089,\"total_volume\":2144179198,\"high_24h\":311.39,\"low_24h\":297.6,\"price_change_24h\":7.42,\"price_change_percentage_24h\":2.44622,\"market_cap_change_24h\":1188680414,\"market_cap_change_percentage_24h\":2.3988,\"circulating_supply\":163276974.63,\"total_supply\":163276974.63,\"max_supply\":165116760.0,\"ath\":686.31,\"ath_change_percentage\":-54.71187,\"ath_date\":\"2021-05-10T07:24:17.097Z\",\"atl\":0.0398177,\"atl_change_percentage\":780496.13977,\"atl_date\":\"2017-10-19T00:00:00.000Z\",\"roi\":null,\"last_updated\":\"2022-08-04T20:19:02.912Z\"}]"
						}
					]
				},
				{
					"name": "Fill rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "38cqXGrl7rUejuVWJSsE5kXkwafs689H",
								"type": "text"
							},
							{
								"key": "access_key",
								"value": "38cqXGrl7rUejuVWJSsE5kXkwafs689H",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/stubs/currency-rates",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"stubs",
								"currency-rates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crypto options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Asset options are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(5);",
									"    pm.expect(jsonData[0].id).to.eql(\"bitcoin\");",
									"    pm.expect(jsonData[0].symbol).to.eql(\"BTC\");",
									"    pm.expect(jsonData[0].name).to.eql(\"Bitcoin\");",
									"    pm.expect(jsonData[0].price).to.eql(22510.0);",
									"    pm.expect(jsonData[4].name).to.eql(\"BNB\");",
									"    pm.expect(jsonData[4].price).to.eql(310.6);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/cryptos/assets",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add crypto position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Position has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.name).to.eql(\"BTC account\");",
									"    pm.expect(jsonData.amount).to.eql(1.0);",
									"    pm.expect(jsonData.description).to.be.null;",
									"    pm.expect(jsonData.value.value).to.be.not.null;",
									"    pm.expect(jsonData.value.currency).to.be.not.null;",
									"    pm.expect(jsonData.addedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.editedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.assetSymbol).to.eql(\"BTC\");",
									"});",
									"pm.environment.set(\"position_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "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",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "483156270467-2ccj56shc5sqpsrietctikeueglhfh6u.apps.googleusercontent.com",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.google.com/o/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.google.com/o/oauth2/auth",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "googleOAuth",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"BTC account\",\n    \"amount\": 1,\n    \"assetSymbol\": \"BTC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/cryptos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crypto position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Position has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.name).to.eql(\"BTC account\");",
									"    pm.expect(jsonData.description).to.be.null;",
									"    pm.expect(jsonData.value.value).to.be.not.null;",
									"    pm.expect(jsonData.value.currency).to.be.not.null;",
									"    pm.expect(jsonData.addedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.editedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.assetSymbol).to.eql(\"BTC\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "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",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "483156270467-2ccj56shc5sqpsrietctikeueglhfh6u.apps.googleusercontent.com",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.google.com/o/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.google.com/o/oauth2/auth",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "googleOAuth",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"BTC account\",\n    \"amount\": 1,\n    \"assetSymbol\": \"BTC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/cryptos/{{position_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos",
								"{{position_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update position new balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "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",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "483156270467-2ccj56shc5sqpsrietctikeueglhfh6u.apps.googleusercontent.com",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.google.com/o/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.google.com/o/oauth2/auth",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "googleOAuth",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"newBalance\": \"1.1\",\n    \"changeType\": \"LENDING_REWARD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/cryptos/{{position_id}}/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos",
								"{{position_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update position increase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "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",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "483156270467-2ccj56shc5sqpsrietctikeueglhfh6u.apps.googleusercontent.com",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.google.com/o/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.google.com/o/oauth2/auth",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "googleOAuth",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"increase\": \".02\",\n    \"changeType\": \"STAKING\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/cryptos/{{position_id}}/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos",
								"{{position_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crypto positions after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Position has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.name).to.eql(\"BTC account\");",
									"    pm.expect(jsonData.amount).to.eql(1.12);",
									"    pm.expect(jsonData.description).to.be.null;",
									"    pm.expect(jsonData.value.value).to.be.not.null;",
									"    pm.expect(jsonData.value.currency).to.be.not.null;",
									"    pm.expect(jsonData.addedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.editedOn).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.assetSymbol).to.eql(\"BTC\");",
									"});",
									"pm.test(\"Position has correct snapshots.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.positionSnapshots).to.have.length(2);",
									"    pm.expect(jsonData.positionSnapshots[0]).to.have.property(\"id\");",
									"    pm.expect(jsonData.positionSnapshots[0].startAmount).to.eql(1.0);",
									"    pm.expect(jsonData.positionSnapshots[0].endAmount).to.eql(1.1);",
									"    pm.expect(jsonData.positionSnapshots[0].type).to.eql(\"LENDING_REWARD\");",
									"    pm.expect(jsonData.positionSnapshots[0].startDate).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.positionSnapshots[0].endDate).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"",
									"    pm.expect(jsonData.positionSnapshots[1].startAmount).to.eql(1.1);",
									"    pm.expect(jsonData.positionSnapshots[1].endAmount).to.eql(1.12);",
									"    pm.expect(jsonData.positionSnapshots[1].type).to.eql(\"STAKING\");",
									"    pm.expect(jsonData.positionSnapshots[1].startDate).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"    pm.expect(jsonData.positionSnapshots[1].endDate).to.eql(moment().format((\"YYYY-MM-DD\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "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",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "483156270467-2ccj56shc5sqpsrietctikeueglhfh6u.apps.googleusercontent.com",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.google.com/o/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.google.com/o/oauth2/auth",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "googleOAuth",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"BTC account\",\n    \"amount\": 1,\n    \"assetSymbol\": \"BTC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/cryptos/{{position_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos",
								"{{position_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add second crypto position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Position has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.name).to.eql(\"BNB account\");",
									"    pm.expect(jsonData.amount).to.eql(12.0);",
									"    pm.expect(jsonData.description).to.eql(\"BNB rules\");",
									"    pm.expect(jsonData.assetSymbol).to.eql(\"BNB\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "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",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "483156270467-2ccj56shc5sqpsrietctikeueglhfh6u.apps.googleusercontent.com",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.google.com/o/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.google.com/o/oauth2/auth",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "googleOAuth",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"BNB account\",\n    \"amount\": 12,\n    \"assetSymbol\": \"BNB\",\n    \"description\": \"BNB rules\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/cryptos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crypto positions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Position has correct information.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.length(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "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",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "483156270467-2ccj56shc5sqpsrietctikeueglhfh6u.apps.googleusercontent.com",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.google.com/o/oauth2/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://accounts.google.com/o/oauth2/auth",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "googleOAuth",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/cryptos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"cryptos"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}